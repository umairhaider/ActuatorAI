name: Publish ActuatorAI to PyPI

on:
  # Only trigger on release branches and tags
  push:
    branches:
      - 'release/**'
    tags:
      - 'v*'
  
  # Allow manual triggering with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        default: ''

# Add permissions for the entire workflow
permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  # Prepare release information
  prepare-release:
    name: Prepare release information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            VERSION=${BRANCH_NAME#release/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "Determined version: $(cat $GITHUB_OUTPUT | grep version | cut -d= -f2)"

  # Only run this job for manual triggers
  create-release-branch:
    name: Create release branch
    needs: prepare-release
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Create and push release branch
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          BRANCH="release/$VERSION"
          
          # Create branch
          git checkout -b $BRANCH
          
          # Update version in setup.py
          sed -i "s/version=\".*\"/version=\"$VERSION\"/" setup.py
          
          # Commit and push
          git add setup.py
          git commit -m "Bump version to $VERSION"
          git push origin $BRANCH
          
          echo "Created and pushed branch $BRANCH"

  # Build and publish - runs in different scenarios
  build-and-publish:
    name: Build and publish ActuatorAI to PyPI
    needs: [prepare-release, create-release-branch]
    # Skip this job if create-release-branch failed, but only when manually triggered
    if: |
      always() && 
      (github.event_name != 'workflow_dispatch' || needs.create-release-branch.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
        # For manual triggers, use the newly created branch
        # For direct pushes to release branches or tags, use the current ref
        ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/heads/release/{0}', needs.prepare-release.outputs.version) || github.ref }}
        token: ${{ secrets.PAT }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
        pip install -r requirements-dev.txt
    
    - name: Extract version
      id: extract_version
      run: |
        if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ needs.prepare-release.outputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Run tests
      run: |
        ./run_tests.sh
    
    - name: Check distribution
      run: |
        python -m twine check dist/*
    
    - name: Create GitHub Release and Tag
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ env.VERSION }}
        tag_name: v${{ env.VERSION }}
        generate_release_notes: true
        files: |
          dist/*.tar.gz
          dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
        verbose: true 